{"version":3,"sources":["assets/twitter-logo.svg","constants.js","Components/Minter/Minter.js","Components/Card/Card.js","App.js","features/arena/useArena.js","features/fight/useFight.js","index.js"],"names":["PVEARENA_ADDRESS","transformCharacterData","characterData","name","imageURI","img","level","exp","Minter","stateUpdater","useState","gameContract","setGameContract","formData","setFormData","fetchNewNft","a","getOwnedMons","monsOwned","newMonId","length","console","log","getMonInfo","txn","mintNewNft","createUC3Mon","once","handleFormChange","event","prevFormData","target","value","useEffect","ethereum","window","signer","ethers","providers","Web3Provider","getSigner","Contract","pveArena","abi","className","type","placeholder","onChange","onClick","NFTCard","selectedNFT","selectedNftUpdater","id","src","alt","EnemyCard","index","chance","attackFunction","numberOfEnemies","canAttack","App","currentAccount","setCurrentAccount","characterNFTs","setCharacterNFTs","enemies","setEnemies","setSelectedNFT","contractAddress","contractAbi","contract","setContract","useArena","arenaContract","monFighting","setMonFighting","handleResult","monId","enemyId","fightResult","alertVictory","alertDefeat","alert","off","fight","wait","doFight","useFight","isMonFighting","addCharacterNFT","newNFT","prevState","modifySelectedNFT","checkIfWalletIsConnected","request","method","accounts","account","fetchEnemyData","getExistingEnemiesIds","existingEnemies","allInfo","map","_","i","getEnemyInfo","Promise","all","res","data","enemyData","startFight","connectWalletAction","fetchNFTMetadata","enemy","mon","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.558cd050.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","const PVEARENA_ADDRESS = '0x4f1Ab9c7Fb8ecc5e2B28fb9F60cAF18B64E26e19';\n\nconst transformCharacterData = (characterData) => {\n    return {\n      name: characterData.name,\n      imageURI: characterData.img,\n      level: characterData.level,\n      exp: characterData.exp\n    };\n  };\n\n  const transformEnemyData = (enemyData) => {\n    return {\n      name: enemyData.name,\n      imageURI: enemyData.img,\n      chance: enemyData.chance\n    };\n  };\n\nexport { PVEARENA_ADDRESS, transformCharacterData, transformEnemyData };","import React, { useEffect, useState } from 'react'\nimport { ethers } from 'ethers'\nimport { PVEARENA_ADDRESS, transformCharacterData } from '../../constants'\nimport pveArena from '../../utils/PVEArena.json'\nimport './Minter.css'\n\nexport default function Minter({ stateUpdater }) {\n    const [gameContract, setGameContract] = useState(null)\n    const [formData, setFormData] = useState({ name: '', img: '' })\n\n    useEffect(() => {\n        const { ethereum } = window\n\n        if (ethereum) {\n            const provider = new ethers.providers.Web3Provider(ethereum)\n            const signer = provider.getSigner()\n            const gameContract = new ethers.Contract(\n                PVEARENA_ADDRESS,\n                pveArena.abi,\n                signer\n            )\n\n            /*\n             * This is the big difference. Set our gameContract in state.\n             */\n            setGameContract(gameContract)\n        } else {\n            console.log('Ethereum object not found')\n        }\n    }, [])\n\n    async function fetchNewNft() {\n        const monsOwned = await gameContract.getOwnedMons()\n        let newMonId = monsOwned.length - 1\n        console.log('Detected new mint! Index is ', newMonId)\n\n        const txn = await gameContract.getMonInfo(newMonId)\n        if (txn.name) {\n            console.log('Collecting data from new minted NFT')\n            stateUpdater(transformCharacterData(txn))\n            //console.log(characterNFTs[i]);\n        } else {\n            console.log('No character NFT found')\n        }\n    }\n\n    async function mintNewNft() {\n        console.log(\n            `Minting new nft with name ${formData.name} and image code ${formData.img}`\n        )\n        try {\n            await gameContract.createUC3Mon(formData.name, formData.img)\n            gameContract.once('NFTMinted', fetchNewNft) // Set listener if nft is minted\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    function handleFormChange(event) {\n        setFormData((prevFormData) => {\n            return {\n                ...prevFormData,\n                [event.target.name]: event.target.value,\n            }\n        })\n    }\n\n    async function handleMintButton() {\n        await mintNewNft()\n    }\n\n    return (\n        <div className=\"mint--container\">\n            <form className=\"mint--form\">\n                <input\n                    className=\"mint--form--input1\"\n                    type=\"text\"\n                    placeholder=\"Mon Name\"\n                    onChange={handleFormChange}\n                    name=\"name\"\n                    value={formData.name}\n                />\n\n                <input\n                    type=\"text\"\n                    placeholder=\"Mon Image IPFS code\"\n                    onChange={handleFormChange}\n                    name=\"img\"\n                    value={formData.img}\n                />\n\n                {/* onClick={mintNewNft} */}\n            </form>\n            <button className=\"mint--button\" onClick={handleMintButton}>\n                MINT NEW NFT (only dev)\n            </button>\n        </div>\n    )\n}\n","import \"./Card.css\";\n\nexport function NFTCard({selectedNFT, selectedNftUpdater, id, name, level, exp, imageURI}) {\n  function selectThisCard() {\n      selectedNftUpdater(id);\n  }\n\n  return (\n    <div\n      className=\"nft-card\"\n      onClick={selectThisCard}\n    >\n      <img\n        //src={`https://cloudflare-ipfs.com/ipfs/${imageURI}`}\n        src={`https://gateway.pinata.cloud/ipfs/${imageURI}`}\n        alt=\"IPFS code is broken\"\n      ></img>\n      <div className=\"nft-stats-container\">\n        <h3>{name}</h3>\n        <p>Level: {level}</p>\n        <p>Exp: {exp} / 100</p>\n        {selectedNFT === id && <button className=\"nftButton\"> SELECTED</button>}\n      </div>\n    </div>\n  );\n}\n\nexport function EnemyCard({index, name, chance, imageURI, numberOfEnemies, attackFunction, canAttack}) {\n\n  function attackThisCard() {\n    attackFunction(index)\n  }\n  return (\n    <div className=\"enemy-card\">\n      <img\n        //src={`https://cloudflare-ipfs.com/ipfs/${imageURI}`}\n        src={`https://gateway.pinata.cloud/ipfs/${imageURI}`}\n        alt=\"IPFS code is broken\"\n      ></img>\n      <div className=\"enemy-stats-container\">\n        <h3>{name}</h3>\n        <h2 className=\"enemy-card-chance\">Chance: {chance}%</h2>\n        { canAttack &&\n        <button className=\"enemyButton\" onClick={attackThisCard}>ATTACK!</button>\n        }\n        </div>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from 'react'\nimport { ethers } from 'ethers'\nimport './App.css'\nimport twitterLogo from './assets/twitter-logo.svg'\nimport Minter from './Components/Minter/Minter'\nimport { NFTCard, EnemyCard } from './Components/Card/Card'\nimport {\n    PVEARENA_ADDRESS,\n    transformCharacterData,\n    transformEnemyData,\n} from './constants'\nimport pveArena from './utils/PVEArena.json'\nimport { useFight } from './features/fight/useFight'\nimport { useArena } from './features/arena/useArena'\n\nconst App = () => {\n    // State\n    const [currentAccount, setCurrentAccount] = useState(null)\n    const [characterNFTs, setCharacterNFTs] = useState([])\n    const [enemies, setEnemies] = useState([])\n    const [selectedNFT, setSelectedNFT] = useState()\n\n    const { contract: arenaContract } = useArena(PVEARENA_ADDRESS, pveArena.abi)\n    const { doFight, isMonFighting } = useFight(arenaContract)\n\n    function addCharacterNFT(newNFT) {\n        setCharacterNFTs((prevState) => [...prevState, newNFT])\n        //console.log(\"Added to state: \", newNFT);\n    }\n\n    function modifySelectedNFT(id) {\n        setSelectedNFT(id)\n    }\n\n    // Actions\n    const checkIfWalletIsConnected = async () => {\n        try {\n            const { ethereum } = window\n\n            if (!ethereum) {\n                console.log('Make sure you have MetaMask!')\n                return\n            } else {\n                const accounts = await ethereum.request({\n                    method: 'eth_accounts',\n                })\n\n                if (accounts.length !== 0) {\n                    const account = accounts[0]\n                    console.log('Found an authorized account:', account)\n                    setCurrentAccount(account)\n                } else {\n                    console.log('No authorized account found')\n                }\n            }\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    const fetchEnemyData = async () => {\n        console.log('Fetching enemy data')\n        if (!arenaContract) return\n        const existingEnemies = await arenaContract.getExistingEnemiesIds()\n        //console.log(`Existing enemies ids: ${existingEnemies}`)\n\n        // Fetch all existing enemies' data\n        const allInfo = existingEnemies.map((_, i) =>\n            arenaContract.getEnemyInfo(i)\n        )\n        const res = await Promise.all(allInfo)\n        setEnemies(res.map((data) => transformEnemyData(data)))\n    }\n\n\n    const startFight = async (enemyId) => {\n        if (selectedNFT >= 0) {\n            console.log(\n                `NFT with id ${selectedNFT} is attacking enemy number ${enemyId}!`\n            )\n            try {\n                await doFight(selectedNFT, enemyId)\n            } catch (error) {\n                console.log(error)\n            }\n        } else {\n            alert('Select an NFT!')\n        }\n    }\n\n    // Render Methods\n    const renderContent = () => {\n        /*\n         * Scenario #1\n         */\n        if (!currentAccount) {\n            return (\n                <div className=\"connect-wallet-container\">\n                    <img\n                        src=\"https://64.media.tumblr.com/6b3b56f2081213366ef95547c3560741/37ff12d5532cb031-ee/s1280x1920/46afd1f32b7d549f3989e579fc23023a314e1a84.gifv\"\n                        alt=\"One Punch Man gif\"\n                    />\n                    <button\n                        className=\"cta-button connect-wallet-button\"\n                        onClick={connectWalletAction}\n                    >\n                        Connect Wallet To Get Started\n                    </button>\n                </div>\n            )\n            /*\n             * Scenario #2\n             */\n        } else if (currentAccount && characterNFTs) {\n            return (\n                <div>\n                    <section className=\"enemies-list\">\n                        {enemies &&\n                            enemies.map((enemy, index) => {\n                                //console.log(`Mapping on enemy number ${index}`);\n                                return (\n                                    <EnemyCard\n                                        key={index}\n                                        index={index}\n                                        name={enemy.name}\n                                        chance={enemy.chance}\n                                        imageURI={enemy.imageURI}\n                                        numberOfEnemies={enemies.length}\n                                        attackFunction={startFight}\n                                        canAttack={selectedNFT >= 0}\n                                    />\n                                )\n                            })}\n                    </section>\n                    {isMonFighting && <button>Fighting...</button>}\n                    {/* <button onClick={handleEndFightButton}>\n                        End fight of nft 0\n                    </button> */}\n\n                    <section className=\"nfts-list\">\n                        {characterNFTs &&\n                            characterNFTs.map((mon, index) => {\n                                //console.log(`Mapping on NFT number ${index}`);\n                                return (\n                                    <NFTCard\n                                        key={index}\n                                        selectedNFT={selectedNFT}\n                                        selectedNftUpdater={modifySelectedNFT}\n                                        id={index}\n                                        name={mon.name}\n                                        level={mon.level}\n                                        exp={mon.exp}\n                                        imageURI={mon.imageURI}\n                                    />\n                                )\n                            })}\n                    </section>\n                    <Minter stateUpdater={addCharacterNFT} />\n                </div>\n            )\n        }\n    }\n\n    ////////////////////////////////////\n    // TEST. TO BE REMOVED\n    async function handleEndFightButton() {\n        console.log('Mon fighting: ', isMonFighting)\n        // try {\n        //     await forceEndFight()\n        // } catch (error) {\n        //     console.log(error)\n        // }\n    }\n    async function forceEndFight() {\n        console.log('Force ending fight')\n        await arenaContract.forceEndFight(0)\n        console.log('Ended')\n    }\n    ///////////////////////////////////\n\n    const connectWalletAction = async () => {\n        try {\n            const { ethereum } = window\n\n            if (!ethereum) {\n                alert('Get MetaMask!')\n                return\n            }\n\n            /*\n             * Request access to account.\n             */\n            const accounts = await ethereum.request({\n                method: 'eth_requestAccounts',\n            })\n\n            /*\n             * Print out public address once we authorize Metamask.\n             */\n            console.log('Connected', accounts[0])\n            setCurrentAccount(accounts[0])\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    /* Initial check for wallet connection */\n    useEffect(() => {\n        checkIfWalletIsConnected()\n    }, [])\n\n    useEffect(() => {\n        if (!arenaContract || !currentAccount) return;\n        fetchEnemyData()\n    }, [arenaContract, currentAccount])\n\n    /* Initial useEffect for NFT data gathering*/\n    useEffect(() => {\n        /*\n         * The function we will call that interacts with our smart contract\n         */\n        const fetchNFTMetadata = async () => {\n            //console.log(\"Fetching NFT data\");\n\n            const monsOwned = await arenaContract.getOwnedMons()\n\n            // Fetch all initially owned NFTs data\n            const allInfo = monsOwned.map((_, i) => arenaContract.getMonInfo(i))\n            const res = await Promise.all(allInfo)\n            setCharacterNFTs(res.map((data) => transformCharacterData(data)))\n        }\n        /*\n         * We only want to run this if we have a connected wallet\n         */\n        if (currentAccount) {\n            fetchNFTMetadata()\n        }\n    }, [arenaContract, currentAccount])\n\n    return (\n        <div className=\"App\">\n            <div className=\"container\">\n                <div className=\"header-container\">\n                    <p className=\"header gradient-text\">👾 UC3Mon 👾</p>\n                    <p className=\"sub-text\">Go catch em on!</p>\n                </div>\n                <div className=\"connect-wallet-container\">\n                    {renderContent()}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default App\n","import { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\n\nexport function useArena(contractAddress, contractAbi) {\n    const [contract, setContract] = useState(null)\n    useEffect(()=> {\n        if(!contractAddress || !contractAbi) return;\n        console.log(\"Initializing game contract\")\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const gameContract = new ethers.Contract(\n            contractAddress,\n            contractAbi,\n          signer\n        );\n        setContract(gameContract)\n    }, [contractAddress, contractAbi])\n\n    return {contract}\n} ","import { useEffect, useState } from 'react'\n\nexport const useFight = (gameContract,) => {\n    const [monFighting, setMonFighting] = useState(null) //Index of the mon fighting\n\n    const handleResult = (monId, enemyId) => async () => {\n        console.log('Detected RNG result!')\n        await gameContract.fightResult(monId, enemyId)\n        gameContract.once(\"battleWon\", alertVictory)\n        gameContract.once(\"battleLost\", alertDefeat)\n    }\n\n    function alertVictory () {\n        alert(\"You win!\")\n        setMonFighting(null)\n        gameContract.off(\"battleLost\", alertDefeat)\n    }\n\n    function alertDefeat () {\n        alert(\"You lose!\")\n        setMonFighting(null)\n        gameContract.off(\"battleWin\", alertVictory)\n    }\n\n    async function doFight(monId, enemyId) {\n        try {\n            const fight = await gameContract.fight(monId, enemyId)\n            await fight.wait()\n            setMonFighting(monId)\n            alert(\"If you deny the fightResult transaction you wont be able to finish the fight!\")\n            gameContract.once('ResultReceived', handleResult(monId, enemyId))\n        } catch (error) {\n            console.log(error)\n        }\n        \n    }\n\n    return { doFight, monFighting }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}